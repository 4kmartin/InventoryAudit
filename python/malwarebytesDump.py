from requests_oauthlib import OAuth2Session
from python.asset import Asset
from oauthlib.oauth2 import BackendApplicationClient
from typing import Optional

class NebulaAsset(Asset):

	def __init__(self, hostname:Optional[str], fqdn:Optional[str], ip:Optional[str], mac:Optional[str]) -> None:
		Asset.__init__(self, "Malwarebytes", hostname, fqdn, ip, mac)

def nebula_url (path:str) -> str:
	return f"https://api.malwarebytes.com{path}"

def get_nebula_client (client_id:str, client_secret:str, account_id:str) -> OAuuth2Session:
	client_scope = ["read", "write"]
	headers = {"accountid": account_id}

	client = BackendApplicationClient(client_id, scope=client_scope)
	nebula = OAuth2Session(client=client, scope=client_scope)
	nebula.headers.update(headers)
	token = nebula.fetch_token(
		token_url=nebula_url("/oauth2/token"),
		client_secret=client_secret,
		scope=" ".join(client_scope))
	return nebula
	
def get_endpoints_in_group (group:str, client:OAuth2Session) -> list[NebulaAsset]:
	machine_ids = []
	payload = {"group_name.keyword":group}
	response = client.post(nebula_url("/nebula/v1/endpoints"),data=payload)
	for i in response.json()["endpoints"]:
		hostname = i['agent']['host_name']
		fqdn = i['agent']['fully_qualified_host_name']
		try:
			ip = i['agent']['nics'][-1]['ips'][-1]
		except (IndexError, KeyError):
			ip = None
		try:
			mac = i['agent']['nics'][-1]['mac_address']
		except IndexError:
			mac = None
		machine_ids.append(
			NebulaAsset(
				hostname,
				fqdn,
				ip,
				mac
			)
		)

	return machine_ids

def get_malwarebytes_assets (groups:list[str], client_id:str, client_secret:str, account_id:str) -> list[NebulaAsset]:
	assets = []
	client = get_nebula_client(client_id, client_secret, account_id)
	for group in groups:
		assets += get_endpoints_in_group(group,client)
	return assets
from requests_oauthlib import OAuth2Session
from python.asset import Asset
from oauthlib.oauth2 import BackendApplicationClient
from datetime import date


class NebulaAsset(Asset):

	def __init__(self,hostname:str, fqdn:str, ip:str, mac:str) :
		self.hostname=hostname
		self.fqdn=fqdn
		self.ip=ip
		self.mac=mac

	def to_tuple (self) -> tuple[str,int,str,str,str,str]:
		return ("Malwarebytes", date.today().toordinal(),self.hostname,self.fqdn,self.ip,self.mac)


def nebula_url (path:str) -> str:
	return f"https://api.malwarebytes.com{path}"

def get_nebula_client (client_id:str, client_secret:str, account_id:str):
	client_scope = ["read", "write"]
	headers = {"accountid": account_id}

	client = BackendApplicationClient(client_id, scope=client_scope)
	nebula = OAuth2Session(client=client, scope=client_scope)
	nebula.headers.update(headers)
	token = nebula.fetch_token(
		token_url=nebula_url("/oauth2/token"),
		client_secret=client_secret,
		scope=" ".join(client_scope))
	return nebula
	
def get_endpoints_in_group (group:str, client:OAuth2Session) -> list[NebulaAsset]:
	machine_ids = []
	payload = {"group_name.keyword":group}
	response = client.post(nebula_url("/nebula/v1/endpoints"),data=payload)
	for i in response.json()["endpoints"]:
		hostname = i['agent']['host_name']
		fqdn = i['agent']['fully_qualified_host_name']
		try:
			ip = i['agent']['nics'][-1]['ips'][-1]
			mac = i['agent']['nics'][-1]['mac_address']
			
		except IndexError:
			ip = ""
			mac = ""
		machine_ids.append(
			NebulaAsset(
				hostname,
				fqdn,
				ip,
				mac
			)
		)

	return machine_ids

def get_malwarebytes_assets (groups:list[str], client_id:str, client_secret:str, account_id:str) -> list[NebulaAsset]:
	assets = []
	client = get_nebula_client(client_id, client_secret, account_id)
	for group in groups:
		assets += get_endpoints_in_group(group,client)
	return assets